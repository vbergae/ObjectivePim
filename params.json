{"name":"ObjectivePim","tagline":"ObjectivePim is a small Dependency Injection Container for Objective-C based on Pimple's source","body":"# ObjectivePim\r\n\r\n[![Build Status](https://travis-ci.org/vbergae/ObjectivePim.svg?branch=master)](https://travis-ci.org/vbergae/ObjectivePim)\r\n\r\nObjectivePim is a small Dependency Injection Container for Objective-C based on [Pimple](https://github.com/fabpot/Pimple)'s source code (including this file :P).\r\n\r\n##Â Installation\r\n\r\n\r\nThe supported way to get ObjectivePim is using [CocoaPods](http://cocoapods.org/).\r\n\r\nAdd ObjectivePim to your Podfile:\r\n\r\n\r\n\tplatform :ios, '6.1'\r\n\r\n\tpod 'ObjectivePim'\r\n\r\n## Usage\r\n\r\n\r\nCreating a container is a matter of instating the ``OPContainer`` class\r\n\r\n    #import <ObjectivePim/ObjectivePim.h>\r\n\r\n    OPContainer *container = OPContainer.new;\r\n\r\n\r\nAs many other dependency injection containers, ObjectivePim is able to manage two\r\ndifferent kind of data: *services* and *parameters*.\r\n\r\n### Defining Parameters\r\n\r\nDefining a parameter is as simple as using the ObjectivePim instance as a dictionary:\r\n\r\n    // define some parameters\r\n    container[@\"foo\"] = @\"bar\";\r\n    container[@\"default_items\"] = @5;\r\n\r\n### Defining Services\r\n\r\nA service is an object that does something as part of a larger system.\r\nExamples of services: Database connection, templating engine, mailer. Almost\r\nany object could be a service.\r\n\r\nServices are defined by blocks that return an instance of an object\r\n\r\n    // define some services\r\n\tcontainer[@\"service\"] = ^(void) {\r\n        return Foo.new;\r\n    };\r\n    \r\n    __block OPContainer *container = OPContainer.new;\r\n    container[@\"other_service\"] = ^(void) {\r\n    \treturn [[Bar alloc] initWithValue:container[@\"value\"]];\r\n    };\r\n\r\nNotice that, in the second example, the block has access to the current container instance, \r\nallowing references to other services or parameters.\r\n\r\nAs objects are only created when you get them, the order of the definitions\r\ndoes not matter, and there is no performance penalty.\r\n\r\nUsing the defined services is also very easy\r\n\r\n    // get the service object\r\n    id service = container[@\"service\"];\r\n\r\n### Protecting Parameters\r\n\r\nBecause ObjectivePim sees blocks as service definitions, you need to\r\nwrap blocks with the ``protect:`` method to store them as\r\nparameter\r\n\r\n\tcontainer[@\"random\"] = [container protect:^(void){\r\n        return @(arc4random());\r\n    }];\r\n\r\n### Modifying services after creation\r\n\r\nIn some cases you may want to modify a service definition after it has been\r\ndefined. You can use the ``extend:`` method to define additional code to\r\nbe run on your service just after it is created\r\n\r\n\tcontainer[@\"afnetworking\"] = ^(void) {\r\n\t\tNSURL *baseURL = [NSURL URLWithString:@\"http://somehost.com\"];\r\n\t\t\t\r\n\t\treturn [[AFAppDotNetAPIClient alloc] \r\n\t\t         initWithBaseURL:baseURL];\r\n\t};\r\n\t\r\n\t[container extend:@\"afnetworking\" withCode:^(id service, OPContainer *container) {\r\n\t\tAFAppDotNetAPIClient *client = (AFAppDotNetAPIClient *)service;\r\n\t\t\r\n\t\tclient.securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];\r\n\t}];\r\n\r\nThe first argument is the name of the object, the second is a block that\r\ngets access to the object instance and the container.\r\n\r\n### Extending a Container\r\n\r\nIf you use the same libraries over and over, you might want to reuse some\r\nservices from one project to the other; package your services into a\r\n**provider** by implementing ``OPServiceProviderProtocol``:\r\n\r\n\t@interface FooProvider : NSObject<OPServiceProviderProtocol>\r\n\r\n\t@end \r\n\t\r\n\t@implementation FooProvider\r\n\t\r\n    - (NSString *)identifier\r\n    {\r\n        return @\"foo\";\r\n    }\r\n\r\n\t- (void)registerProvider:(OPContainer *)container\r\n\t{\r\n\t\t// register some services and parameters\r\n        // on container\r\n\t}\r\n\t\r\n\t@end\r\n\r\nThen, the provider can be easily registered on a Container:\r\n\r\n    [container register:FooProvider.new];\r\n    \r\n    FooProvider *foo = container[@\"foo\"];\r\n\r\n### Defining Factory Services\r\n\r\nBy default, each time you get a service, ObjectivePim returns the **same instance**\r\nof it. If you want a different instance to be returned for all calls, wrap your\r\nblock with the ``factory:`` method\r\n\r\n    container[@\"service\"] = [container factory:^(OPContainer *container) {\r\n        return [[Foo alloc] initWithValue:container[@\"key_to_value\"]];\r\n    }];\r\n\r\n","google":"UA-50898757-1","note":"Don't delete this file! It's used internally to help with page regeneration."}